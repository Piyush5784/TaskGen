datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  selectedOrg   String?
  Authenticator Authenticator[]
  organisations Organisations[]
  projects      Projects[]
  tasks         Tasks[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Organisations {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  email       String
  type        String
  phoneNo     Int
  countryName String
  team        Team[]
  size        String
  userId      String     @db.ObjectId
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects    Projects[]
}

model Team {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  role             Role
  email            String
  organisationId   String        @db.ObjectId
  organisation     Organisations @relation(fields: [organisationId], references: [id], onDelete: Cascade)
}

enum Role {
  Admin
  Member
  Viewer
}

model Projects {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  techStack      String[]
  LiveLink       String?
  RepoLink       String?
  goals          String[]
  organisationId String        @db.ObjectId
  organisation   Organisations @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  userId         String        @db.ObjectId
  user           User          @relation(fields: [userId], references: [id])
  tasks          Tasks[]
}

model Tasks {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  sectionType String?
  status      Status
  reviewer    String?
  projectId   String   @db.ObjectId
  project     Projects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
}

enum Status {
  done
  inProgress
  closed
  completed
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
